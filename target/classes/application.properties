
# \u4E0A\u4F20\u6587\u4EF6\u603B\u7684\u6700\u5927\u503C
spring.servlet.multipart.max-request-size=100MB
# \u5355\u4E2A\u6587\u4EF6\u7684\u6700\u5927\u503C
spring.servlet.multipart.max-file-size=100MB


## jsp
spring.mvc.view.prefix=/WEB-INF/jsp/
spring.mvc.view.suffix=.jsp


spring.datasource.url=jdbc:mysql://localhost:3306/excel_handler?serverTimezone=UTC
spring.datasource.driver-class-name=com.mysql.jdbc.Driver
spring.datasource.username=stephen
spring.datasource.password=83603919


# 扫描mapper.xml
mybatis.mapper-locations=classpath:/mapping/*Mapper.xml
mybatis.type-aliases-package=stephen_spring_cloud.entity



# 初始化连接的数量
spring.datasource.initial-size=20
# 数据库连接的最大数量
spring.datasource.max-active=300
# 最小连接数
spring.datasource.min-idle=200
# 获取连接的最大等待时间
spring.datasource.max-wait=10
# 是否缓存预编译语句，对支持游标的数据库性能提升巨大
spring.datasource.pool-prepared-statements=
# 最大缓存预编译语句的数量大小，当大于 0 时，pool-prepared-statements 自动触发修改为 true
spring.datasource.max-pool-prepared-statement-per-connection-size =
# spring.datasource.max-open-prepared-statements = # 等价于上面的 max-pool-prepared-statement-per-connection-size
# 检测连接是否有效的 SQL 语句，一般为查询语句
spring.datasource.validation-query=select 1 from dual
# 检测连接是否有效语句执行超时
spring.datasource.validation-query-timeout=
# 获取连接时检测连接是否有效
spring.datasource.test-on-borrow=
# 返回连接时检测连接是否有效
spring.datasource.test-on-return=
# 对空闲连接进行检测，如果空闲时间大于 time-between-eviction-runs-millis 检测连接是否有效
spring.datasource.test-while-idle=
# 检测空闲连接是否有效的时间间隔
spring.datasource.time-between-eviction-runs-millis=
# 连接的最小生存时间
spring.datasource.min-evictable-idle-time-millis=